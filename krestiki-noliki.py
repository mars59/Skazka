# -*- coding: utf-8 -*-
# Крестики-нолики
# Krestiki-noliki
# Tic-tac-toe
# http://pythonicway.com/python-games/python-textgames/4-tictactoeterm
# https://github.com/g0t0wasd/python/blob/master/games/terminal_games/xos.py

# Крестики-нолики это логическая игра для двух игроков на поле 3х3 клетки.

# Игровое поле представлен оодномерным списком (list) ячеек поляс числами от 1 до 9.
# Для создания игрового поля воспользуемся функцией range()
# Диапазон чисел указан со значения первого параметра включительно,
#   и до значения второго параметра исключительно.
board = list(range(1,10))

# Функция, которая показывает игровое поле
def draw_board(board):
    # Отображаемячейки верхнюю границу игрового поля
    print ("-" * 13)
    # Отображаем три ряда ячеек
    for i in range(3):
        # Отображаемячейки таблицы
        print ("|", board[0+i*3], "|", board[1+i*3], "|", board[2+i*3], "|")
        # Отображаем Черту под ячейками
        print ("-" * 13)

# Функция ввода данных от пользователя
# Входной параметр player_token - крестик или нолик
# Функция изменяет список board игрового поля
def take_input(player_token):
    # Цикл while ожидает ввода корректных данных (работает поа не введе корректные данные)
    # Можно указать только свободную клетку на игровом поле
    valid = False # инициализация признака получения корректного ответа пользователя
    while not valid:
        # Используем оператор input для ввода данных с клавиатуры
        player_answer = input("Куда поставим " + player_token+"? ")
        # Используем конструкции try/except для проверки корректности ввода
        try:
            # Вводим число
            player_answer = int(player_answer)
        except:
            # Показываем сообщение об ошибке
            print ("Некорректный ввод. Вы уверены, что ввели число?")
            # Переходим в начало цикла while
            continue
        # Используем конструкции if/else для проверки условий
        if player_answer >= 1 and player_answer <= 9: # в пределах игового поля
            if (str(board[player_answer-1]) not in "XO"): # поле не занято
                board[player_answer-1] = player_token # Изменяем данные игрового поля
                valid = True # получен корректный ответ пользователя
            else:
                # Показываем сообщение об ошибке
                print ("Эта клетка уже занята")
        else:
            # Показываем сообщение об ошибке
            print ("Некорректный ввод. Введите число от 1 до 9.")

# Функция проверки окончания игры - определился ли победитель
def check_win(board):
    # Создаем кортеж (tuple) с выигрышными результатами
    win_coord = ((0,1,2),(3,4,5),(6,7,8),(0,3,6),(1,4,7),(2,5,8),(0,4,8),(2,4,6))
    # Проверяем в цикле наличие выигрышного результата в игровом поле
    for each in win_coord:
        # Если символы во всех трех заданных клетках равны
        if board[each[0]] == board[each[1]] == board[each[2]]:
            # возвращаем выигрышный символ - кто победил - крестики, или нолики
            # Символ при приведении к логическому типу вернет True
            return board[each[0]]
    # Если в цикле не найден выигрыщный результат, то возвращаем значение False
    return False

# Главная функция программы
def main(board):
    counter = 0 # Счетчик ходов нужен для чередования ходов игроков за крестики и нолики
    win = False # Победа не достигнута
    # Ожидаем достижения победы
    while not win:
        # Показываем игровое поле
        draw_board(board)
        # Чередуем ходы игроков за крестики и нолики
        # Начинают крестики
        if counter % 2 == 0:
            # Ходят крестики
            take_input("X")
        else:
            # Ходят нолики
            take_input("O")
        # Увеличиваем счетчик ходов
        counter += 1
        # Победитель может определиться только после четвертого хода
        # Оптимизируем проверки определения победителя
        if counter > 4:
            # Проверяем победителя
            tmp = check_win(board)
            if tmp:
                # Победитель найден
                print (tmp, "выиграл. Поздравляем!")
                win = True
                break # Выходим из цикла игры
        # Все девять клеток игрового поля заполнены, а победитель так и не найден
        if counter == 9:
            # Победителя нат
            print ("Ничья!")
            break # Выходим из цикла игры1
    # Показываем окончательный вид игрового поля
    draw_board(board)

# Запускаем игру
# Вся логика игры оформлена с помощью функций
main(board)
